// <auto-generated />
using System;
using ApiBiblioteca.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApiBiblioteca.Migrations
{
    [DbContext(typeof(ApiLibrosContext))]
    partial class ApiLibrosContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.9");

            modelBuilder.Entity("ApiBiblioteca.Models.Genero", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Generos");
                });

            modelBuilder.Entity("ApiBiblioteca.Models.Libro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AutorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GeneroId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Paginas")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AutorId");

                    b.HasIndex("GeneroId");

                    b.ToTable("Libros");
                });

            modelBuilder.Entity("ApiBiblioteca.Models.Permisos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Editar")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Eliminar")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Escribir")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Insertar")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Leer")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Permisos");
                });

            modelBuilder.Entity("ApiBiblioteca.Models.Persona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("persona_Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Persona");

                    b.HasDiscriminator<string>("persona_Type").HasValue("persona_base");
                });

            modelBuilder.Entity("ApiBiblioteca.Models.Autor", b =>
                {
                    b.HasBaseType("ApiBiblioteca.Models.Persona");

                    b.HasDiscriminator().HasValue("autor_base");
                });

            modelBuilder.Entity("ApiBiblioteca.Models.Usuario", b =>
                {
                    b.HasBaseType("ApiBiblioteca.Models.Persona");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("PermisosId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("PermisosId");

                    b.HasDiscriminator().HasValue("usuario_base");
                });

            modelBuilder.Entity("ApiBiblioteca.Models.Libro", b =>
                {
                    b.HasOne("ApiBiblioteca.Models.Autor", "Autor")
                        .WithMany("Libros")
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiBiblioteca.Models.Genero", "Genero")
                        .WithMany("Libros")
                        .HasForeignKey("GeneroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autor");

                    b.Navigation("Genero");
                });

            modelBuilder.Entity("ApiBiblioteca.Models.Usuario", b =>
                {
                    b.HasOne("ApiBiblioteca.Models.Permisos", "Permisos")
                        .WithMany()
                        .HasForeignKey("PermisosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permisos");
                });

            modelBuilder.Entity("ApiBiblioteca.Models.Genero", b =>
                {
                    b.Navigation("Libros");
                });

            modelBuilder.Entity("ApiBiblioteca.Models.Autor", b =>
                {
                    b.Navigation("Libros");
                });
#pragma warning restore 612, 618
        }
    }
}
